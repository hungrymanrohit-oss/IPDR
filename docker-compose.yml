version: '3.8'

services:
  # PostgreSQL with TimescaleDB extension
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: network_dashboard_postgres
    environment:
      POSTGRES_DB: network_flows
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-timescale.sql:/docker-entrypoint-initdb.d/init-timescale.sql
    ports:
      - "5432:5432"
    networks:
      - network_dashboard

  # Redis for Celery and Channels
  redis:
    image: redis:7-alpine
    container_name: network_dashboard_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - network_dashboard

  # RabbitMQ for Celery broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: network_dashboard_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - network_dashboard

  # Django backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: network_dashboard_backend
    environment:
      - DEBUG=True
      - SECRET_KEY=your-secret-key-change-in-production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=network_flows
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - network_dashboard
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             daphne -b 0.0.0.0 -p 8000 dashboard.asgi:application"

  # Celery worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: network_dashboard_celery_worker
    environment:
      - DEBUG=True
      - SECRET_KEY=your-secret-key-change-in-production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=network_flows
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - network_dashboard
    command: celery -A flow_processor worker --loglevel=info

  # Celery beat scheduler
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: network_dashboard_celery_beat
    environment:
      - DEBUG=True
      - SECRET_KEY=your-secret-key-change-in-production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=network_flows
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - network_dashboard
    command: celery -A flow_processor beat --loglevel=info

  # React frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: network_dashboard_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_SOCKET_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - network_dashboard

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: network_dashboard_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - network_dashboard

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  network_dashboard:
    driver: bridge